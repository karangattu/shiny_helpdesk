name: Generate AI responses to issues and label them

on:
  issues:
    types: [opened]

jobs:
  auto-label:
    permissions:
      issues: write
    runs-on: ubuntu-latest
    steps:
      - name: Auto Label Issue
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const prompt = `Tell me what is the best label from the following list for a Shiny app issue: ["bug", "chore/refactor", "compatibility", "component-specific", "documentation", "duplicate", "performance", "ui/ux", "Feature request"]. Answer with a terse answer please or just give the appropriate label. Title: ${issue.data.title}\n\n${issue.data.body}`;

            const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
              },
              body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_completion_tokens: 10000
              })
            });

            const openaiData = await openaiResponse.json();
            const labels = ["bug", "chore/refactor", "compatibility", "component-specific", "documentation", "duplicate", "performance", "ui/ux", "Feature request"];
            const responseLower = openaiData.choices[0].message.content.toLowerCase();
            const label = labels.find(l => responseLower.includes(l)) || 'enhancement';

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: [label]
            });

  ai-response-comment:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium --with-deps

      - name: Process issue description
        id: process-description
        run: python process_issue.py
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}

      - name: Read output.md file
        id: read-output
        run: |
          cat output.md

      - name: Create comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('output.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
