name: Issue Greeter

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  auto-label:
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Get Issue Details
        uses: actions/github-script@v7
        with:
          script: |
            async function autoLabelIssue() {
              const result = await github.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: env.ISSUE_NUMBER
              });

              const issueTitle = result.data.title;
              const issueBody = result.data.body;
              const prompt = `Title: ${issueTitle}\n\n${issueBody}`;

              const openaiResponse = await fetch('https://api.openai.com/v1/completions', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + env.OPENAI_API_KEY
                },
                body: JSON.stringify({
                  'model': 'gpt-4o-mini',
                  'prompt': prompt,
                  'max_completion_tokens': 10000
                })
              });

              function getLabelFromOpenAIResponse(response) {
                const labels = ["bug", "chore/refactor", "compatibility", "component-specific", "documentation", "duplicate", "enhancement", "performance", "ui/ux"];
                const responseLower = response.toLowerCase();
                for (const label of labels) {
                  if (responseLower.includes(label)) {
                    return label;
                  }
                }
                return 'enhancement';
              }

              const openaiData = await openaiResponse.json();
              const label = getLabelFromOpenAIResponse(openaiData.choices[0].text);

              await github.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: env.ISSUE_NUMBER,
                labels: [label]
              });
            }

            autoLabelIssue();


  greet-issue-creator:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium --with-deps

      - name: Process issue description
        id: process-description
        run: python process_issue.py
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}

      - name: Read output.md file
        id: read-output
        run: |
          cat output.md

      - name: Create comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('output.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
